@model HotelApp.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "Hỗ trợ khách hàng";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<style>
    /* Remove forced height on container elements */
    .container-fluid {
        padding: 15px; /* Add some padding for spacing */
    }

    .row {
        margin: 0; /* Remove default negative margins from Bootstrap row */
    }

    .col-md-3, .col-md-9 {
        padding: 0 10px; /* Reduce padding for a tighter layout */
    }

    /* Card styling */
    .card {
        max-height: 540px; /* Set a reasonable max height for the card */
        display: flex;
        flex-direction: column;
        border-radius: 8px; /* Softer corners */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    }

    .card-header {
        flex-shrink: 0; /* Prevent header from shrinking */
        padding: 10px 15px; /* Reduce padding for a more compact look */
    }

    .card-body {
        flex: 1; /* Allow the body to expand within the card's max-height */
        overflow-y: auto; /* Allow scrolling within the body if needed */
        padding: 10px 15px; /* Reduce padding */
    }

    .card-footer {
        flex-shrink: 0; /* Prevent footer from shrinking */
        padding: 10px 15px; /* Reduce padding */
    }

    /* Chat container styles */
    .chat-container {
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 60%;
        margin: 6px 10px; /* Slightly smaller margins */
        padding: 8px; /* Slightly smaller padding */
        border-radius: 12px; /* Softer corners */
        word-wrap: break-word;
    }

    .message-own {
        background-color: #0084ff;
        color: white;
        align-self: flex-end;
        margin-left: auto;
    }

    .message-other {
        background-color: #e9ecef;
        color: black;
        align-self: flex-start;
        margin-right: auto;
    }

    .message small {
        font-size: 0.75em; /* Slightly smaller timestamp */
        opacity: 0.7;
    }

    /* Left sidebar list */
    .list-group {
        overflow-y: auto; /* Allow scrolling within the list if needed */
    }

    .list-group-item {
        padding: 8px 12px; /* Reduce padding for a more compact list */
    }

        .list-group-item a {
            color: #333;
            text-decoration: none;
        }

            .list-group-item a:hover {
                color: #0084ff;
            }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Chat Support</h4>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var conversation in Model.Conversations)
                        {
                            <li class="list-group-item">
                                <a href="@Url.Action("Index", "Chat", new { area = "Admin", conversationId = conversation.ConversationId })">
                                    <div class="d-flex justify-content-between">
                                        <span>@conversation.OtherUserName</span>
                                        <small>@conversation.LastMessageTime.ToString("HH:mm")</small>
                                    </div>
                                    <p>@conversation.LastMessage</p>
                                    <small id="status-@conversation.ConversationId">Đang hoạt động</small>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    @if (!string.IsNullOrEmpty(Model.ConversationId))
                    {
                        <h4 class="card-title">@Model.OtherUserName - @Model.OtherUserEmail</h4>
                        <small>Đang hoạt động</small>
                    }
                    else
                    {
                        <h4 class="card-title">Hệ thống hỗ trợ khách hàng</h4>
                        <p>Chọn một cuộc trò chuyện từ danh sách bên trái để bắt đầu hỗ trợ khách hàng</p>
                    }
                </div>
                <div class="card-body chat-container" id="chatMessages">
                    @if (!string.IsNullOrEmpty(Model.ConversationId))
                    {
                        foreach (var message in Model.Messages)
                        {
                            <div class="message @(message.IsOwnMessage ? "message-own" : "message-other")">
                                <strong>@message.SenderName</strong>: @message.Content<br />
                                <small>@message.Timestamp</small>
                            </div>
                        }
                    }
                </div>
                @if (!string.IsNullOrEmpty(Model.ConversationId))
                {
                    <div class="card-footer">
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn...">
                            <button class="btn btn-primary" onclick="sendMessage()">Gửi</button>
                        </div>
                    </div>
                }
            </div>
            <div id="notifications"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const currentUserId = '@ViewData["CurrentUserId"]';
        const conversationId = '@Model.ConversationId';
        let lastMessageId = '';

        function loadMessages() {
            if (!conversationId) return;

            $.ajax({
                url: '/Admin/Chat/GetMessages',
                type: 'GET',
                data: { conversationId: conversationId },
                success: function (messages) {
                    const chatMessages = $('#chatMessages');
                    chatMessages.empty();
                    messages.forEach(message => {
                        const messageClass = message.isOwnMessage ? 'message-own' : 'message-other';
                        const messageHtml = `
                            <div class="message ${messageClass}">
                                <strong>${message.senderName}</strong>: ${message.content}<br>
                                <small>${message.timestamp}</small>
                            </div>`;
                        chatMessages.append(messageHtml);
                        lastMessageId = message.id;
                    });
                    chatMessages.scrollTop(chatMessages[0].scrollHeight);
                },
                error: function () {
                    console.error('Failed to load messages.');
                }
            });
        }

        function sendMessage() {
            const content = $('#messageInput').val().trim();
            if (!content) return;

            $.ajax({
                url: '/Admin/Chat/SendMessage',
                type: 'POST',
                data: {
                    conversationId: conversationId,
                    content: content,
                    __RequestVerificationToken: $('#RequestVerificationToken').val()
                },
                success: function (message) {
                    const chatMessages = $('#chatMessages');
                    const messageHtml = `
                        <div class="message message-own">
                            <strong>${message.senderName}</strong>: ${message.content}<br>
                            <small>${message.timestamp}</small>
                        </div>`;
                    chatMessages.append(messageHtml);
                    chatMessages.scrollTop(chatMessages[0].scrollHeight);
                    $('#messageInput').val('');
                    lastMessageId = message.id;
                },
                error: function () {
                    console.error('Failed to send message.');
                }
            });
        }

        $(document).ready(function () {
            loadMessages();
            setInterval(loadMessages, 5000); // Poll every 5 seconds
            $('#messageInput').on('keypress', function (e) {
                if (e.which === 13) { // Enter key
                    sendMessage();
                }
            });
        });
    </script>
}